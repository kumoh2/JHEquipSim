//------------------------------------------------------------------------------
// <auto-generated>
//     이 코드는 도구를 사용하여 생성되었습니다.
//
//     파일 내용을 변경하면 잘못된 동작이 발생할 수 있으며, 코드를 다시 생성하면
//     이러한 변경 내용이 손실됩니다.
// </auto-generated>
//------------------------------------------------------------------------------

namespace JHEquipSim.ServiceReference
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="JHEquipSim.ServiceReference.IXmlReceiverService")]
    public interface IXmlReceiverService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IXmlReceiverService/ReceiveXml", ReplyAction="http://tempuri.org/IXmlReceiverService/ReceiveXmlResponse")]
        System.Threading.Tasks.Task ReceiveXmlAsync(string xmlData);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public interface IXmlReceiverServiceChannel : JHEquipSim.ServiceReference.IXmlReceiverService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.2.0-preview1.23462.5")]
    public partial class XmlReceiverServiceClient : System.ServiceModel.ClientBase<JHEquipSim.ServiceReference.IXmlReceiverService>, JHEquipSim.ServiceReference.IXmlReceiverService
    {
        
        /// <summary>
        /// 서비스 엔드포인트를 구성하려면 이 부분 메서드를 구현합니다.
        /// </summary>
        /// <param name="serviceEndpoint">구성할 엔드포인트</param>
        /// <param name="clientCredentials">클라이언트 자격 증명</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public XmlReceiverServiceClient() : 
                base(XmlReceiverServiceClient.GetDefaultBinding(), XmlReceiverServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IXmlReceiverService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public XmlReceiverServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(XmlReceiverServiceClient.GetBindingForEndpoint(endpointConfiguration), XmlReceiverServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public XmlReceiverServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(XmlReceiverServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public XmlReceiverServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(XmlReceiverServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public XmlReceiverServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task ReceiveXmlAsync(string xmlData)
        {
            return base.Channel.ReceiveXmlAsync(xmlData);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IXmlReceiverService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("이름이 \'{0}\'인 엔드포인트를 찾을 수 없습니다.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IXmlReceiverService))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8000/XmlReceiverService");
            }
            throw new System.InvalidOperationException(string.Format("이름이 \'{0}\'인 엔드포인트를 찾을 수 없습니다.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return XmlReceiverServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IXmlReceiverService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return XmlReceiverServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IXmlReceiverService);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_IXmlReceiverService,
        }
    }
}
